MEMORY
{
	ZP: start = $00, size = $100, type = rw, file = "";
	STACK: start = $100, size = $200, type = rw, file = "";
	RAM: start = $300, size = $500, type = rw, file = "";
	PPU_REG: start = $2000, size = $8, type = rw, file = "";
	IO_REG: start = $4000, size = $20, type = rw, file = "";
	SRAM: start = $6000, size = $2000, type = rw, file = "";
	MMC1_REG: start = $8000, size = $8000, type = rw, file = ""; # actually write-only
	MEM0: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 0;
	MEM1: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 1;
	MEM2: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 2;
	MEM3: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 3;
	MEM4: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 4;
	MEM5: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 5;
	MEM6: start = $8000, size = $4000, fill = yes, fillval = $ff, bank = 6;
	MEM7: start = $C000, size = $4000, fill = yes, fillval = $ff, bank = 7;
}

SEGMENTS
{
	ZEROPAGE: load = ZP, type = zp;
	BSS: load = RAM, type = rw;
	PPU_REG: load = PPU_REG, type = rw;
	IO_REG: load = IO_REG, type = rw;
	SRAM: load = SRAM, type = rw;
	MMC1_REG: load = MMC1_REG, type = rw; # actually write-only
	PRG0: load = MEM0, type = ro, align = $4000;
	PRG1: load = MEM1, type = ro, align = $4000;
	PRG2: load = MEM2, type = ro, align = $4000;
	PRG3: load = MEM3, type = ro, align = $4000;
	PRG4: load = MEM4, type = ro, align = $4000;
	PRG5: load = MEM5, type = ro, align = $4000;
	PRG6: load = MEM6, type = ro, align = $4000;
	PRG7: load = MEM7, type = ro, align = $4000;
	VECTORS: load = MEM7, type = ro, start = $FFFA;
}
